// <auto-generated />
using System;
using ArticlePublishing.Models.Entities.Manager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArticlePublishing.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArticlePublishing.Models.Entities.AdminList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthDegree");

                    b.Property<string>("AuthName")
                        .IsRequired();

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("AdminList");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.ArticleImages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleID");

                    b.Property<string>("ImagesPath")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.HasIndex("ArticleID");

                    b.ToTable("ArticleImages");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.Articles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate");

                    b.Property<bool>("ArticleStatus");

                    b.Property<bool>("BannedStatus");

                    b.Property<int?>("CategoryID");

                    b.Property<string>("DefaultImage")
                        .IsRequired();

                    b.Property<int>("NumOfLikes");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.BannedArticles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminListID");

                    b.Property<int?>("ArticleID");

                    b.Property<DateTime>("BannedDate");

                    b.Property<int>("BannedLimit");

                    b.Property<int?>("ComplaintID");

                    b.Property<string>("Reason")
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.HasIndex("AdminListID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("ComplaintID");

                    b.ToTable("BannedArticle");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.BannedUsers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminListID");

                    b.Property<DateTime?>("BannedDate");

                    b.Property<DateTime?>("BannedLimit");

                    b.Property<string>("Reason")
                        .HasMaxLength(500);

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("AdminListID");

                    b.HasIndex("UserID");

                    b.ToTable("BannedUsers");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.Categories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoriName")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.Comments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleID");

                    b.Property<DateTime?>("CommentDate");

                    b.Property<string>("Text")
                        .HasMaxLength(1000);

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.Complaints", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleID");

                    b.Property<bool>("Checked");

                    b.Property<string>("Subject")
                        .HasMaxLength(50);

                    b.Property<string>("Text")
                        .HasMaxLength(500);

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("UserID");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.FavouriteArticles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleID");

                    b.Property<bool>("Favourite");

                    b.Property<bool>("Liked");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("UserID");

                    b.ToTable("FavouriteArticles");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccountStatus");

                    b.Property<string>("Adress")
                        .HasMaxLength(150);

                    b.Property<bool>("BannedStatus");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastActiveDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .HasMaxLength(12);

                    b.Property<string>("ProfileImage")
                        .IsRequired();

                    b.Property<DateTime?>("RegisterDate");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.AdminList", b =>
                {
                    b.HasOne("ArticlePublishing.Models.Entities.Users", "User")
                        .WithMany("AdminList")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.ArticleImages", b =>
                {
                    b.HasOne("ArticlePublishing.Models.Entities.Articles", "Article")
                        .WithMany("ArticleImages")
                        .HasForeignKey("ArticleID");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.Articles", b =>
                {
                    b.HasOne("ArticlePublishing.Models.Entities.Categories", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryID");

                    b.HasOne("ArticlePublishing.Models.Entities.Users", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.BannedArticles", b =>
                {
                    b.HasOne("ArticlePublishing.Models.Entities.AdminList", "AdminList")
                        .WithMany("BannedArticles")
                        .HasForeignKey("AdminListID");

                    b.HasOne("ArticlePublishing.Models.Entities.Articles", "Article")
                        .WithMany("BannedArticles")
                        .HasForeignKey("ArticleID");

                    b.HasOne("ArticlePublishing.Models.Entities.Complaints", "Complaint")
                        .WithMany("BannedArticles")
                        .HasForeignKey("ComplaintID");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.BannedUsers", b =>
                {
                    b.HasOne("ArticlePublishing.Models.Entities.AdminList", "AdminList")
                        .WithMany("BannedUsers")
                        .HasForeignKey("AdminListID");

                    b.HasOne("ArticlePublishing.Models.Entities.Users", "User")
                        .WithMany("BannedUsers")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.Comments", b =>
                {
                    b.HasOne("ArticlePublishing.Models.Entities.Articles", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleID");

                    b.HasOne("ArticlePublishing.Models.Entities.Users", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.Complaints", b =>
                {
                    b.HasOne("ArticlePublishing.Models.Entities.Articles", "Article")
                        .WithMany("Complaints")
                        .HasForeignKey("ArticleID");

                    b.HasOne("ArticlePublishing.Models.Entities.Users", "User")
                        .WithMany("Complaints")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ArticlePublishing.Models.Entities.FavouriteArticles", b =>
                {
                    b.HasOne("ArticlePublishing.Models.Entities.Articles", "Article")
                        .WithMany("FavouriteArticles")
                        .HasForeignKey("ArticleID");

                    b.HasOne("ArticlePublishing.Models.Entities.Users", "User")
                        .WithMany("FavouriteArticles")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
